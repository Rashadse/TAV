<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

chan freeLane, busyLane, outOfRange;

const int streetLength = 10;
typedef int[0, streetLength] distance_t;
chan query[distance_t];
chan streetQuery[distance_t];
chan streetResponse[distance_t];

const int carCount = 2;
typedef int[0, carCount] id_t;

const int laneCount = 2;
typedef int[0, laneCount] lane_t;

int obstacleDistance;
int carDistance;

chan lane1Move[distance_t];
chan lane2Move[distance_t];
chan changeLane1[distance_t];
</declaration><template><name x="5" y="5">Car</name><parameter>const int id, distance_t init_distance</parameter><declaration>// Place local declarations here.
clock x;
distance_t distance;
lane_t lane;

void initialize(){
	lane = 0;
	distance = init_distance;
}</declaration><location id="id0" x="-424" y="-144"><committed/></location><location id="id1" x="-224" y="-72"><urgent/></location><location id="id2" x="16" y="-144"><urgent/></location><location id="id3" x="16" y="-208"><committed/></location><location id="id4" x="-144" y="-144"><name x="-184" y="-128">changeLane</name></location><location id="id5" x="-288" y="-144"><name x="-328" y="-168">idle</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id5"/><label kind="assignment" x="-392" y="-144">initialize()</label></transition><transition><source ref="id1"/><target ref="id5"/></transition><transition><source ref="id2"/><target ref="id1"/><nail x="-80" y="-72"/></transition><transition><source ref="id3"/><target ref="id5"/><label kind="synchronisation" x="-288" y="-264">changeLane1[distance]!</label><nail x="16" y="-240"/><nail x="-288" y="-240"/></transition><transition><source ref="id5"/><target ref="id1"/><label kind="guard" x="-376" y="-72">distance &lt; 10</label><label kind="synchronisation" x="-424" y="-48">lane1Move[distance]!</label><label kind="assignment" x="-360" y="-32">distance++</label><nail x="-288" y="-8"/></transition><transition><source ref="id4"/><target ref="id2"/><label kind="synchronisation" x="-72" y="-168">busyLane?</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="-72" y="-208">freeLane?</label><nail x="-80" y="-208"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-272" y="-176">query[distance]!</label></transition></template><template><name>ObstacleCar</name><parameter> const int id, distance_t distance</parameter><location id="id6" x="0" y="0"></location><init ref="id6"/><transition><source ref="id6"/><target ref="id6"/><label kind="guard" x="-16" y="64">distance &lt; 10</label><label kind="synchronisation" x="-16" y="80">lane2Move[distance]!</label><label kind="assignment" x="-16" y="96">distance++</label><nail x="-48" y="64"/><nail x="56" y="64"/></transition></template><template><name>RadarSensor</name><declaration>distance_t distance;
id_t position_id;</declaration><location id="id7" x="-224" y="8"><committed/></location><location id="id8" x="-432" y="8"><committed/></location><location id="id9" x="-624" y="8"></location><location id="id10" x="-40" y="8"></location><init ref="id9"/><transition><source ref="id7"/><target ref="id10"/><label kind="select" x="-192" y="8">i : id_t</label><label kind="synchronisation" x="-192" y="24">streetResponse[i]?</label><label kind="assignment" x="-192" y="40">position_id = i</label></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="-408" y="8">streetQuery[distance]!</label></transition><transition><source ref="id10"/><target ref="id10"/><label kind="guard" x="-16" y="104">position_id == 0</label><label kind="synchronisation" x="-16" y="120">freeLane!</label><nail x="-40" y="96"/><nail x="16" y="96"/></transition><transition><source ref="id10"/><target ref="id10"/><label kind="guard" x="-144" y="-128">position_id != 0</label><label kind="synchronisation" x="-112" y="-112">busyLane!</label><nail x="-40" y="-80"/><nail x="8" y="-80"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="select" x="-592" y="8">i:int[0,streetLength]</label><label kind="synchronisation" x="-528" y="24">query[i]?</label><label kind="assignment" x="-544" y="40">distance = i</label></transition></template><template><name>Street</name><parameter>distance_t car1distance, distance_t car2distance</parameter><declaration>int lane1[distance_t];
int lane2[distance_t];

distance_t distance;



id_t check(distance_t distance){
	return lane2[distance];
}

void move_forward(int lane, distance_t d){
	if(lane == 1)
	{
		lane1[d+1] = lane1[d];
		lane1[d]   = 0;
	}
	else{
		lane2[d+1] = lane2[d];
		lane2[d]   = 0;
	}
}

void change_lane(distance_t d){
	lane2[d] = lane1[d];
	lane1[d]   = 0;
}

void initialize()
{
	lane1[car1distance] = 1;
	lane2[car2distance] = 2;
}</declaration><location id="id11" x="-320" y="-40"><committed/></location><location id="id12" x="-440" y="152"><committed/></location><location id="id13" x="-624" y="8"><committed/></location><location id="id14" x="-488" y="-104"><committed/></location><location id="id15" x="-440" y="8"><name x="-488" y="8">idle</name></location><init ref="id13"/><transition><source ref="id11"/><target ref="id15"/><nail x="-320" y="8"/></transition><transition><source ref="id15"/><target ref="id11"/><label kind="select" x="-344" y="56">d : distance_t</label><label kind="synchronisation" x="-344" y="24">changeLane1[d]?</label><label kind="assignment" x="-344" y="40">change_lane(d)</label><nail x="-384" y="-40"/></transition><transition><source ref="id12"/><target ref="id15"/></transition><transition><source ref="id15"/><target ref="id12"/><label kind="select" x="-408" y="128">d : distance_t</label><label kind="synchronisation" x="-408" y="144">lane2Move[d]?</label><label kind="assignment" x="-408" y="160">move_forward(2, d)</label><nail x="-392" y="48"/></transition><transition><source ref="id13"/><target ref="id15"/><label kind="assignment" x="-608" y="8">initialize()</label></transition><transition><source ref="id15"/><target ref="id12"/><label kind="select" x="-560" y="128">d : distance_t</label><label kind="synchronisation" x="-560" y="144">lane1Move[d]?</label><label kind="assignment" x="-592" y="160">move_forward(1, d)</label><nail x="-488" y="48"/></transition><transition><source ref="id14"/><target ref="id15"/><label kind="synchronisation" x="-432" y="-104">streetResponse[check(distance)]!</label><nail x="-440" y="-104"/></transition><transition><source ref="id15"/><target ref="id14"/><label kind="select" x="-592" y="-64">d : distance_t</label><label kind="synchronisation" x="-592" y="-48">streetQuery[d]?</label><label kind="assignment" x="-592" y="-32">distance = d</label><nail x="-488" y="-40"/></transition></template><system>// Place template instantiations here.
obstacle = ObstacleCar(2, 5);
car = Car(1, 2);
street = Street(2, 5);

// List one or more processes to be composed into a system.
system obstacle, RadarSensor, car, street;</system></nta>